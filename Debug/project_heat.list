
project_heat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003108  08003108  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003108  08003108  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000014  08003124  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003124  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a67b  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002183  00000000  00000000  0002a6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  0002c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094b  00000000  00000000  0002d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178eb  00000000  00000000  0002ddeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d40e  00000000  00000000  000456d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089fc6  00000000  00000000  00052ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030e8  00000000  00000000  000dcaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000dfb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080030cc 	.word	0x080030cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080030cc 	.word	0x080030cc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 faf2 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f93c 	bl	80003d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f91c 	bl	8000398 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f860 	bl	8000224 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000164:	f000 f8cc 	bl	8000300 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_app();
 8000168:	f002 fce6 	bl	8002b38 <main_app>
 800016c:	e7fc      	b.n	8000168 <main+0x1c>

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b094      	sub	sp, #80	; 0x50
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f002 ff79 	bl	8003074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	f107 0314 	add.w	r3, r7, #20
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 fbbb 	bl	8001940 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d0:	f000 f99e 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	2102      	movs	r1, #2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fe27 	bl	8001e44 <HAL_RCC_ClockConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001fc:	f000 f988 	bl	8000510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000200:	2302      	movs	r3, #2
 8000202:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000208:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f001 ff75 	bl	80020fc <HAL_RCCEx_PeriphCLKConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000218:	f000 f97a 	bl	8000510 <Error_Handler>
  }
}
 800021c:	bf00      	nop
 800021e:	3750      	adds	r7, #80	; 0x50
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <MX_ADC1_Init+0xd4>)
 8000236:	4a31      	ldr	r2, [pc, #196]	; (80002fc <MX_ADC1_Init+0xd8>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <MX_ADC1_Init+0xd4>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000242:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <MX_ADC1_Init+0xd4>)
 8000244:	2200      	movs	r2, #0
 8000246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b2b      	ldr	r3, [pc, #172]	; (80002f8 <MX_ADC1_Init+0xd4>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <MX_ADC1_Init+0xd4>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <MX_ADC1_Init+0xd4>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800025c:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <MX_ADC1_Init+0xd4>)
 800025e:	2204      	movs	r2, #4
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	4825      	ldr	r0, [pc, #148]	; (80002f8 <MX_ADC1_Init+0xd4>)
 8000264:	f000 faee 	bl	8000844 <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 f94f 	bl	8000510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000272:	2301      	movs	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800027a:	2307      	movs	r3, #7
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	481d      	ldr	r0, [pc, #116]	; (80002f8 <MX_ADC1_Init+0xd4>)
 8000284:	f000 fcb0 	bl	8000be8 <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 f93f 	bl	8000510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000292:	2302      	movs	r3, #2
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4816      	ldr	r0, [pc, #88]	; (80002f8 <MX_ADC1_Init+0xd4>)
 80002a0:	f000 fca2 	bl	8000be8 <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 f931 	bl	8000510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002ae:	2303      	movs	r3, #3
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4619      	mov	r1, r3
 80002be:	480e      	ldr	r0, [pc, #56]	; (80002f8 <MX_ADC1_Init+0xd4>)
 80002c0:	f000 fc92 	bl	8000be8 <HAL_ADC_ConfigChannel>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80002ca:	f000 f921 	bl	8000510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002ce:	2304      	movs	r3, #4
 80002d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002d6:	2307      	movs	r3, #7
 80002d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4619      	mov	r1, r3
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <MX_ADC1_Init+0xd4>)
 80002e0:	f000 fc82 	bl	8000be8 <HAL_ADC_ConfigChannel>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80002ea:	f000 f911 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000030 	.word	0x20000030
 80002fc:	40012400 	.word	0x40012400

08000300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000314:	463b      	mov	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_TIM2_Init+0x94>)
 800031e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_TIM2_Init+0x94>)
 8000326:	2247      	movs	r2, #71	; 0x47
 8000328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_TIM2_Init+0x94>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_TIM2_Init+0x94>)
 8000332:	2263      	movs	r2, #99	; 0x63
 8000334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_TIM2_Init+0x94>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_TIM2_Init+0x94>)
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000342:	4814      	ldr	r0, [pc, #80]	; (8000394 <MX_TIM2_Init+0x94>)
 8000344:	f001 ff90 	bl	8002268 <HAL_TIM_Base_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800034e:	f000 f8df 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000358:	f107 0308 	add.w	r3, r7, #8
 800035c:	4619      	mov	r1, r3
 800035e:	480d      	ldr	r0, [pc, #52]	; (8000394 <MX_TIM2_Init+0x94>)
 8000360:	f001 ffd1 	bl	8002306 <HAL_TIM_ConfigClockSource>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800036a:	f000 f8d1 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036e:	2300      	movs	r3, #0
 8000370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000376:	463b      	mov	r3, r7
 8000378:	4619      	mov	r1, r3
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <MX_TIM2_Init+0x94>)
 800037c:	f002 f98e 	bl	800269c <HAL_TIMEx_MasterConfigSynchronization>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000386:	f000 f8c3 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	3718      	adds	r7, #24
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200000a4 	.word	0x200000a4

08000398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_DMA_Init+0x38>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <MX_DMA_Init+0x38>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_DMA_Init+0x38>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	200b      	movs	r0, #11
 80003bc:	f000 fee5 	bl	800118a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003c0:	200b      	movs	r0, #11
 80003c2:	f000 fefe 	bl	80011c2 <HAL_NVIC_EnableIRQ>

}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b45      	ldr	r3, [pc, #276]	; (8000500 <MX_GPIO_Init+0x12c>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a44      	ldr	r2, [pc, #272]	; (8000500 <MX_GPIO_Init+0x12c>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b42      	ldr	r3, [pc, #264]	; (8000500 <MX_GPIO_Init+0x12c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000400:	4b3f      	ldr	r3, [pc, #252]	; (8000500 <MX_GPIO_Init+0x12c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a3e      	ldr	r2, [pc, #248]	; (8000500 <MX_GPIO_Init+0x12c>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b3c      	ldr	r3, [pc, #240]	; (8000500 <MX_GPIO_Init+0x12c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b39      	ldr	r3, [pc, #228]	; (8000500 <MX_GPIO_Init+0x12c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a38      	ldr	r2, [pc, #224]	; (8000500 <MX_GPIO_Init+0x12c>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b36      	ldr	r3, [pc, #216]	; (8000500 <MX_GPIO_Init+0x12c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000430:	4b33      	ldr	r3, [pc, #204]	; (8000500 <MX_GPIO_Init+0x12c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a32      	ldr	r2, [pc, #200]	; (8000500 <MX_GPIO_Init+0x12c>)
 8000436:	f043 0308 	orr.w	r3, r3, #8
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b30      	ldr	r3, [pc, #192]	; (8000500 <MX_GPIO_Init+0x12c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0308 	and.w	r3, r3, #8
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_TEST_LED_GPIO_Port, BOARD_TEST_LED_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044e:	482d      	ldr	r0, [pc, #180]	; (8000504 <MX_GPIO_Init+0x130>)
 8000450:	f001 fa44 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CTRL_LED_100_Pin|CTRL_LED_50_Pin|CTRL_LED_0_Pin|CTRL_LED_CHRGING_Pin
 8000454:	2200      	movs	r2, #0
 8000456:	f647 6178 	movw	r1, #32376	; 0x7e78
 800045a:	482b      	ldr	r0, [pc, #172]	; (8000508 <MX_GPIO_Init+0x134>)
 800045c:	f001 fa3e 	bl	80018dc <HAL_GPIO_WritePin>
                          |CTRL_LED_CHECK_CHRG_Pin|LATCH_PWMA_Pin|LATCH_AIN2_Pin|LATCH_STBY_Pin
                          |CTRL_RELAY_EXT_Pin|CTRL_WARN_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_FAST_CHG_FET_Pin|CTRL_100A_CHG_FET_Pin|CTRL_100A_FET_Pin|CTRL_200A_FET_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000466:	4829      	ldr	r0, [pc, #164]	; (800050c <MX_GPIO_Init+0x138>)
 8000468:	f001 fa38 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOARD_TEST_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_TEST_LED_Pin;
 800046c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2302      	movs	r3, #2
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	481f      	ldr	r0, [pc, #124]	; (8000504 <MX_GPIO_Init+0x130>)
 8000486:	f001 f8a5 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_OV_MCU_Pin IN_UDV_MCU_Pin IN_OV_BANK_B_Pin IN_UDV_BANK_A_Pin */
  GPIO_InitStruct.Pin = IN_OV_MCU_Pin|IN_UDV_MCU_Pin|IN_OV_BANK_B_Pin|IN_UDV_BANK_A_Pin;
 800048a:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 800048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	481b      	ldr	r0, [pc, #108]	; (800050c <MX_GPIO_Init+0x138>)
 80004a0:	f001 f898 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_AIN1_Pin */
  GPIO_InitStruct.Pin = LATCH_AIN1_Pin;
 80004a4:	2302      	movs	r3, #2
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LATCH_AIN1_GPIO_Port, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4814      	ldr	r0, [pc, #80]	; (8000508 <MX_GPIO_Init+0x134>)
 80004b8:	f001 f88c 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_LED_100_Pin CTRL_LED_50_Pin CTRL_LED_0_Pin CTRL_LED_CHRGING_Pin
                           CTRL_LED_CHECK_CHRG_Pin LATCH_PWMA_Pin LATCH_AIN2_Pin LATCH_STBY_Pin
                           CTRL_RELAY_EXT_Pin CTRL_WARN_LED_Pin */
  GPIO_InitStruct.Pin = CTRL_LED_100_Pin|CTRL_LED_50_Pin|CTRL_LED_0_Pin|CTRL_LED_CHRGING_Pin
 80004bc:	f647 6378 	movw	r3, #32376	; 0x7e78
 80004c0:	613b      	str	r3, [r7, #16]
                          |CTRL_LED_CHECK_CHRG_Pin|LATCH_PWMA_Pin|LATCH_AIN2_Pin|LATCH_STBY_Pin
                          |CTRL_RELAY_EXT_Pin|CTRL_WARN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <MX_GPIO_Init+0x134>)
 80004d6:	f001 f87d 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_FAST_CHG_FET_Pin CTRL_100A_CHG_FET_Pin CTRL_100A_FET_Pin CTRL_200A_FET_Pin */
  GPIO_InitStruct.Pin = CTRL_FAST_CHG_FET_Pin|CTRL_100A_CHG_FET_Pin|CTRL_100A_FET_Pin|CTRL_200A_FET_Pin;
 80004da:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2302      	movs	r3, #2
 80004ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <MX_GPIO_Init+0x138>)
 80004f4:	f001 f86e 	bl	80015d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000
 8000504:	40011000 	.word	0x40011000
 8000508:	40010c00 	.word	0x40010c00
 800050c:	40010800 	.word	0x40010800

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a14      	ldr	r2, [pc, #80]	; (8000578 <HAL_MspInit+0x5c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_MspInit+0x5c>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_MspInit+0x60>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_MspInit+0x60>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000
 800057c:	40010000 	.word	0x40010000

08000580 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a28      	ldr	r2, [pc, #160]	; (800063c <HAL_ADC_MspInit+0xbc>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d149      	bne.n	8000634 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <HAL_ADC_MspInit+0xc0>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a26      	ldr	r2, [pc, #152]	; (8000640 <HAL_ADC_MspInit+0xc0>)
 80005a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <HAL_ADC_MspInit+0xc0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <HAL_ADC_MspInit+0xc0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a20      	ldr	r2, [pc, #128]	; (8000640 <HAL_ADC_MspInit+0xc0>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <HAL_ADC_MspInit+0xc0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_LOAD_Pin|ADC1_BANK_A_Pin|ADC1_BANK_B_Pin|ADC1_CHARGER_Pin;
 80005d0:	231e      	movs	r3, #30
 80005d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d4:	2303      	movs	r3, #3
 80005d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	4819      	ldr	r0, [pc, #100]	; (8000644 <HAL_ADC_MspInit+0xc4>)
 80005e0:	f000 fff8 	bl	80015d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <HAL_ADC_MspInit+0xcc>)
 80005e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 80005fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000602:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 800060e:	2220      	movs	r2, #32
 8000610:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 8000614:	2200      	movs	r2, #0
 8000616:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 800061a:	f000 fded 	bl	80011f8 <HAL_DMA_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000624:	f7ff ff74 	bl	8000510 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 800062c:	621a      	str	r2, [r3, #32]
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_ADC_MspInit+0xc8>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40012400 	.word	0x40012400
 8000640:	40021000 	.word	0x40021000
 8000644:	40010800 	.word	0x40010800
 8000648:	20000060 	.word	0x20000060
 800064c:	40020008 	.word	0x40020008

08000650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000660:	d10b      	bne.n	800067a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_TIM_Base_MspInit+0x34>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_TIM_Base_MspInit+0x34>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_TIM_Base_MspInit+0x34>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
	...

080006cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <DMA1_Channel1_IRQHandler+0x10>)
 80006d2:	f000 fe4b 	bl	800136c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000060 	.word	0x20000060

080006e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff fff8 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006f2:	490c      	ldr	r1, [pc, #48]	; (8000724 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006f4:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000708:	4c09      	ldr	r4, [pc, #36]	; (8000730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000716:	f002 fcb5 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fd17 	bl	800014c <main>
  bx lr
 800071e:	4770      	bx	lr
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000728:	08003110 	.word	0x08003110
  ldr r2, =_sbss
 800072c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000730:	20000128 	.word	0x20000128

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>
	...

08000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_Init+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_Init+0x28>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 fd13 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074e:	200f      	movs	r0, #15
 8000750:	f000 f808 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000754:	f7ff fee2 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_InitTick+0x54>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0x58>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fd2b 	bl	80011de <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e00e      	b.n	80007b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d80a      	bhi.n	80007ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a0:	f000 fcf3 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_InitTick+0x5c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000004 	.word	0x20000004

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <HAL_IncTick+0x20>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000008 	.word	0x20000008
 80007e4:	200000ec 	.word	0x200000ec

080007e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	200000ec 	.word	0x200000ec

080007fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff fff0 	bl	80007e8 <HAL_GetTick>
 8000808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_Delay+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000822:	bf00      	nop
 8000824:	f7ff ffe0 	bl	80007e8 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008

08000844 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e0be      	b.n	80009e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	2b00      	cmp	r3, #0
 8000872:	d109      	bne.n	8000888 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fe7c 	bl	8000580 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 faff 	bl	8000e8c <ADC_ConversionStop_Disable>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 8099 	bne.w	80009d2 <HAL_ADC_Init+0x18e>
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 8095 	bne.w	80009d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008b0:	f023 0302 	bic.w	r3, r3, #2
 80008b4:	f043 0202 	orr.w	r2, r3, #2
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7b1b      	ldrb	r3, [r3, #12]
 80008ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008dc:	d003      	beq.n	80008e6 <HAL_ADC_Init+0xa2>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d102      	bne.n	80008ec <HAL_ADC_Init+0xa8>
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	e000      	b.n	80008ee <HAL_ADC_Init+0xaa>
 80008ec:	2300      	movs	r3, #0
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7d1b      	ldrb	r3, [r3, #20]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d119      	bne.n	8000930 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7b1b      	ldrb	r3, [r3, #12]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d109      	bne.n	8000918 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	3b01      	subs	r3, #1
 800090a:	035a      	lsls	r2, r3, #13
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	e00b      	b.n	8000930 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f043 0220 	orr.w	r2, r3, #32
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	430a      	orrs	r2, r1
 8000942:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <HAL_ADC_Init+0x1a8>)
 800094c:	4013      	ands	r3, r2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	6812      	ldr	r2, [r2, #0]
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	430b      	orrs	r3, r1
 8000956:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000960:	d003      	beq.n	800096a <HAL_ADC_Init+0x126>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d104      	bne.n	8000974 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	3b01      	subs	r3, #1
 8000970:	051b      	lsls	r3, r3, #20
 8000972:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	430a      	orrs	r2, r1
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_ADC_Init+0x1ac>)
 8000990:	4013      	ands	r3, r2
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	429a      	cmp	r2, r3
 8000996:	d10b      	bne.n	80009b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	f023 0303 	bic.w	r3, r3, #3
 80009a6:	f043 0201 	orr.w	r2, r3, #1
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ae:	e018      	b.n	80009e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f023 0312 	bic.w	r3, r3, #18
 80009b8:	f043 0210 	orr.w	r2, r3, #16
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	f043 0201 	orr.w	r2, r3, #1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d0:	e007      	b.n	80009e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	f043 0210 	orr.w	r2, r3, #16
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	ffe1f7fd 	.word	0xffe1f7fd
 80009f0:	ff1f0efe 	.word	0xff1f0efe

080009f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a64      	ldr	r2, [pc, #400]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d004      	beq.n	8000a18 <HAL_ADC_Start_DMA+0x24>
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a63      	ldr	r2, [pc, #396]	; (8000ba0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d106      	bne.n	8000a26 <HAL_ADC_Start_DMA+0x32>
 8000a18:	4b60      	ldr	r3, [pc, #384]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f040 80b3 	bne.w	8000b8c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d101      	bne.n	8000a34 <HAL_ADC_Start_DMA+0x40>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e0ae      	b.n	8000b92 <HAL_ADC_Start_DMA+0x19e>
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2201      	movs	r2, #1
 8000a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f000 f9cb 	bl	8000dd8 <ADC_Enable>
 8000a42:	4603      	mov	r3, r0
 8000a44:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f040 809a 	bne.w	8000b82 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a56:	f023 0301 	bic.w	r3, r3, #1
 8000a5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a4e      	ldr	r2, [pc, #312]	; (8000ba0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d105      	bne.n	8000a78 <HAL_ADC_Start_DMA+0x84>
 8000a6c:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d115      	bne.n	8000aa4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d026      	beq.n	8000ae0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa2:	e01d      	b.n	8000ae0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a39      	ldr	r2, [pc, #228]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d004      	beq.n	8000ac4 <HAL_ADC_Start_DMA+0xd0>
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a38      	ldr	r2, [pc, #224]	; (8000ba0 <HAL_ADC_Start_DMA+0x1ac>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d10d      	bne.n	8000ae0 <HAL_ADC_Start_DMA+0xec>
 8000ac4:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d007      	beq.n	8000ae0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ad8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	f023 0206 	bic.w	r2, r3, #6
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af8:	e002      	b.n	8000b00 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <HAL_ADC_Start_DMA+0x1b0>)
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <HAL_ADC_Start_DMA+0x1b4>)
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	4a23      	ldr	r2, [pc, #140]	; (8000bac <HAL_ADC_Start_DMA+0x1b8>)
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f06f 0202 	mvn.w	r2, #2
 8000b28:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b38:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6a18      	ldr	r0, [r3, #32]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	334c      	adds	r3, #76	; 0x4c
 8000b44:	4619      	mov	r1, r3
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f000 fbaf 	bl	80012ac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b58:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b5c:	d108      	bne.n	8000b70 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b6c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b6e:	e00f      	b.n	8000b90 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b7e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b80:	e006      	b.n	8000b90 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000b8a:	e001      	b.n	8000b90 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	40012800 	.word	0x40012800
 8000ba4:	08000f0f 	.word	0x08000f0f
 8000ba8:	08000f8b 	.word	0x08000f8b
 8000bac:	08000fa7 	.word	0x08000fa7

08000bb0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr

08000bc2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
	...

08000be8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d101      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x20>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e0dc      	b.n	8000dc2 <HAL_ADC_ConfigChannel+0x1da>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b06      	cmp	r3, #6
 8000c16:	d81c      	bhi.n	8000c52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	3b05      	subs	r3, #5
 8000c2a:	221f      	movs	r2, #31
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	4019      	ands	r1, r3
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	3b05      	subs	r3, #5
 8000c44:	fa00 f203 	lsl.w	r2, r0, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c50:	e03c      	b.n	8000ccc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b0c      	cmp	r3, #12
 8000c58:	d81c      	bhi.n	8000c94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	3b23      	subs	r3, #35	; 0x23
 8000c6c:	221f      	movs	r2, #31
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4019      	ands	r1, r3
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	3b23      	subs	r3, #35	; 0x23
 8000c86:	fa00 f203 	lsl.w	r2, r0, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	631a      	str	r2, [r3, #48]	; 0x30
 8000c92:	e01b      	b.n	8000ccc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3b41      	subs	r3, #65	; 0x41
 8000ca6:	221f      	movs	r2, #31
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4019      	ands	r1, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3b41      	subs	r3, #65	; 0x41
 8000cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b09      	cmp	r3, #9
 8000cd2:	d91c      	bls.n	8000d0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68d9      	ldr	r1, [r3, #12]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3b1e      	subs	r3, #30
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	4019      	ands	r1, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	6898      	ldr	r0, [r3, #8]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3b1e      	subs	r3, #30
 8000d00:	fa00 f203 	lsl.w	r2, r0, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	e019      	b.n	8000d42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6919      	ldr	r1, [r3, #16]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	2207      	movs	r2, #7
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4019      	ands	r1, r3
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	6898      	ldr	r0, [r3, #8]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b10      	cmp	r3, #16
 8000d48:	d003      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d4e:	2b11      	cmp	r3, #17
 8000d50:	d132      	bne.n	8000db8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <HAL_ADC_ConfigChannel+0x1e4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d125      	bne.n	8000da8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d126      	bne.n	8000db8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b10      	cmp	r3, #16
 8000d80:	d11a      	bne.n	8000db8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d88:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8c:	0c9a      	lsrs	r2, r3, #18
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d98:	e002      	b.n	8000da0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f9      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x1b2>
 8000da6:	e007      	b.n	8000db8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f043 0220 	orr.w	r2, r3, #32
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40012400 	.word	0x40012400
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	431bde83 	.word	0x431bde83

08000dd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d040      	beq.n	8000e78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f042 0201 	orr.w	r2, r2, #1
 8000e04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <ADC_Enable+0xac>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <ADC_Enable+0xb0>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	0c9b      	lsrs	r3, r3, #18
 8000e12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e14:	e002      	b.n	8000e1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f9      	bne.n	8000e16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e22:	f7ff fce1 	bl	80007e8 <HAL_GetTick>
 8000e26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e28:	e01f      	b.n	8000e6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e2a:	f7ff fcdd 	bl	80007e8 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d918      	bls.n	8000e6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d011      	beq.n	8000e6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f043 0210 	orr.w	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	f043 0201 	orr.w	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e007      	b.n	8000e7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d1d8      	bne.n	8000e2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000000 	.word	0x20000000
 8000e88:	431bde83 	.word	0x431bde83

08000e8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d12e      	bne.n	8000f04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eb6:	f7ff fc97 	bl	80007e8 <HAL_GetTick>
 8000eba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ebc:	e01b      	b.n	8000ef6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ebe:	f7ff fc93 	bl	80007e8 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d914      	bls.n	8000ef6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d10d      	bne.n	8000ef6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f043 0210 	orr.w	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e007      	b.n	8000f06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d0dc      	beq.n	8000ebe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d127      	bne.n	8000f78 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f42:	d115      	bne.n	8000f70 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d111      	bne.n	8000f70 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fe1d 	bl	8000bb0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f76:	e004      	b.n	8000f82 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	4798      	blx	r3
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f7ff fe12 	bl	8000bc2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	f043 0204 	orr.w	r2, r3, #4
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fe01 	bl	8000bd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4906      	ldr	r1, [pc, #24]	; (8001074 <__NVIC_EnableIRQ+0x34>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	f7ff ff90 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff2d 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff42 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff90 	bl	80010cc <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5f 	bl	8001078 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff35 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e043      	b.n	8001296 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_DMA_Init+0xa8>)
 8001216:	4413      	add	r3, r2
 8001218:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <HAL_DMA_Init+0xac>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	009a      	lsls	r2, r3, #2
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_DMA_Init+0xb0>)
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2202      	movs	r2, #2
 8001230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001242:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001246:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	bffdfff8 	.word	0xbffdfff8
 80012a4:	cccccccd 	.word	0xcccccccd
 80012a8:	40020000 	.word	0x40020000

080012ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_DMA_Start_IT+0x20>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e04b      	b.n	8001364 <HAL_DMA_Start_IT+0xb8>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d13a      	bne.n	8001356 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f937 	bl	8001578 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	2b00      	cmp	r3, #0
 8001310:	d008      	beq.n	8001324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 020e 	orr.w	r2, r2, #14
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e00f      	b.n	8001344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0204 	bic.w	r2, r2, #4
 8001332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 020a 	orr.w	r2, r2, #10
 8001342:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e005      	b.n	8001362 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800135e:	2302      	movs	r3, #2
 8001360:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	2204      	movs	r2, #4
 800138a:	409a      	lsls	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d04f      	beq.n	8001434 <HAL_DMA_IRQHandler+0xc8>
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	2b00      	cmp	r3, #0
 800139c:	d04a      	beq.n	8001434 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d107      	bne.n	80013bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0204 	bic.w	r2, r2, #4
 80013ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a66      	ldr	r2, [pc, #408]	; (800155c <HAL_DMA_IRQHandler+0x1f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d029      	beq.n	800141a <HAL_DMA_IRQHandler+0xae>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a65      	ldr	r2, [pc, #404]	; (8001560 <HAL_DMA_IRQHandler+0x1f4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d022      	beq.n	8001416 <HAL_DMA_IRQHandler+0xaa>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a63      	ldr	r2, [pc, #396]	; (8001564 <HAL_DMA_IRQHandler+0x1f8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01a      	beq.n	8001410 <HAL_DMA_IRQHandler+0xa4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a62      	ldr	r2, [pc, #392]	; (8001568 <HAL_DMA_IRQHandler+0x1fc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d012      	beq.n	800140a <HAL_DMA_IRQHandler+0x9e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a60      	ldr	r2, [pc, #384]	; (800156c <HAL_DMA_IRQHandler+0x200>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00a      	beq.n	8001404 <HAL_DMA_IRQHandler+0x98>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a5f      	ldr	r2, [pc, #380]	; (8001570 <HAL_DMA_IRQHandler+0x204>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d102      	bne.n	80013fe <HAL_DMA_IRQHandler+0x92>
 80013f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013fc:	e00e      	b.n	800141c <HAL_DMA_IRQHandler+0xb0>
 80013fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001402:	e00b      	b.n	800141c <HAL_DMA_IRQHandler+0xb0>
 8001404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001408:	e008      	b.n	800141c <HAL_DMA_IRQHandler+0xb0>
 800140a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140e:	e005      	b.n	800141c <HAL_DMA_IRQHandler+0xb0>
 8001410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001414:	e002      	b.n	800141c <HAL_DMA_IRQHandler+0xb0>
 8001416:	2340      	movs	r3, #64	; 0x40
 8001418:	e000      	b.n	800141c <HAL_DMA_IRQHandler+0xb0>
 800141a:	2304      	movs	r3, #4
 800141c:	4a55      	ldr	r2, [pc, #340]	; (8001574 <HAL_DMA_IRQHandler+0x208>)
 800141e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8094 	beq.w	8001552 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001432:	e08e      	b.n	8001552 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	2202      	movs	r2, #2
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d056      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x186>
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d051      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10b      	bne.n	8001474 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 020a 	bic.w	r2, r2, #10
 800146a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a38      	ldr	r2, [pc, #224]	; (800155c <HAL_DMA_IRQHandler+0x1f0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d029      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x166>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a37      	ldr	r2, [pc, #220]	; (8001560 <HAL_DMA_IRQHandler+0x1f4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d022      	beq.n	80014ce <HAL_DMA_IRQHandler+0x162>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a35      	ldr	r2, [pc, #212]	; (8001564 <HAL_DMA_IRQHandler+0x1f8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01a      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x15c>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a34      	ldr	r2, [pc, #208]	; (8001568 <HAL_DMA_IRQHandler+0x1fc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d012      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x156>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a32      	ldr	r2, [pc, #200]	; (800156c <HAL_DMA_IRQHandler+0x200>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00a      	beq.n	80014bc <HAL_DMA_IRQHandler+0x150>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a31      	ldr	r2, [pc, #196]	; (8001570 <HAL_DMA_IRQHandler+0x204>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d102      	bne.n	80014b6 <HAL_DMA_IRQHandler+0x14a>
 80014b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014b4:	e00e      	b.n	80014d4 <HAL_DMA_IRQHandler+0x168>
 80014b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ba:	e00b      	b.n	80014d4 <HAL_DMA_IRQHandler+0x168>
 80014bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c0:	e008      	b.n	80014d4 <HAL_DMA_IRQHandler+0x168>
 80014c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c6:	e005      	b.n	80014d4 <HAL_DMA_IRQHandler+0x168>
 80014c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014cc:	e002      	b.n	80014d4 <HAL_DMA_IRQHandler+0x168>
 80014ce:	2320      	movs	r3, #32
 80014d0:	e000      	b.n	80014d4 <HAL_DMA_IRQHandler+0x168>
 80014d2:	2302      	movs	r3, #2
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <HAL_DMA_IRQHandler+0x208>)
 80014d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d034      	beq.n	8001552 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014f0:	e02f      	b.n	8001552 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2208      	movs	r2, #8
 80014f8:	409a      	lsls	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d028      	beq.n	8001554 <HAL_DMA_IRQHandler+0x1e8>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d023      	beq.n	8001554 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 020e 	bic.w	r2, r2, #14
 800151a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
    }
  }
  return;
 8001552:	bf00      	nop
 8001554:	bf00      	nop
}
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40020008 	.word	0x40020008
 8001560:	4002001c 	.word	0x4002001c
 8001564:	40020030 	.word	0x40020030
 8001568:	40020044 	.word	0x40020044
 800156c:	40020058 	.word	0x40020058
 8001570:	4002006c 	.word	0x4002006c
 8001574:	40020000 	.word	0x40020000

08001578 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f202 	lsl.w	r2, r1, r2
 8001594:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d108      	bne.n	80015b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015b6:	e007      	b.n	80015c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	60da      	str	r2, [r3, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b08b      	sub	sp, #44	; 0x2c
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	e169      	b.n	80018bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015e8:	2201      	movs	r2, #1
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 8158 	bne.w	80018b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4a9a      	ldr	r2, [pc, #616]	; (8001874 <HAL_GPIO_Init+0x2a0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d05e      	beq.n	80016ce <HAL_GPIO_Init+0xfa>
 8001610:	4a98      	ldr	r2, [pc, #608]	; (8001874 <HAL_GPIO_Init+0x2a0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d875      	bhi.n	8001702 <HAL_GPIO_Init+0x12e>
 8001616:	4a98      	ldr	r2, [pc, #608]	; (8001878 <HAL_GPIO_Init+0x2a4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d058      	beq.n	80016ce <HAL_GPIO_Init+0xfa>
 800161c:	4a96      	ldr	r2, [pc, #600]	; (8001878 <HAL_GPIO_Init+0x2a4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d86f      	bhi.n	8001702 <HAL_GPIO_Init+0x12e>
 8001622:	4a96      	ldr	r2, [pc, #600]	; (800187c <HAL_GPIO_Init+0x2a8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d052      	beq.n	80016ce <HAL_GPIO_Init+0xfa>
 8001628:	4a94      	ldr	r2, [pc, #592]	; (800187c <HAL_GPIO_Init+0x2a8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d869      	bhi.n	8001702 <HAL_GPIO_Init+0x12e>
 800162e:	4a94      	ldr	r2, [pc, #592]	; (8001880 <HAL_GPIO_Init+0x2ac>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d04c      	beq.n	80016ce <HAL_GPIO_Init+0xfa>
 8001634:	4a92      	ldr	r2, [pc, #584]	; (8001880 <HAL_GPIO_Init+0x2ac>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d863      	bhi.n	8001702 <HAL_GPIO_Init+0x12e>
 800163a:	4a92      	ldr	r2, [pc, #584]	; (8001884 <HAL_GPIO_Init+0x2b0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d046      	beq.n	80016ce <HAL_GPIO_Init+0xfa>
 8001640:	4a90      	ldr	r2, [pc, #576]	; (8001884 <HAL_GPIO_Init+0x2b0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d85d      	bhi.n	8001702 <HAL_GPIO_Init+0x12e>
 8001646:	2b12      	cmp	r3, #18
 8001648:	d82a      	bhi.n	80016a0 <HAL_GPIO_Init+0xcc>
 800164a:	2b12      	cmp	r3, #18
 800164c:	d859      	bhi.n	8001702 <HAL_GPIO_Init+0x12e>
 800164e:	a201      	add	r2, pc, #4	; (adr r2, 8001654 <HAL_GPIO_Init+0x80>)
 8001650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001654:	080016cf 	.word	0x080016cf
 8001658:	080016a9 	.word	0x080016a9
 800165c:	080016bb 	.word	0x080016bb
 8001660:	080016fd 	.word	0x080016fd
 8001664:	08001703 	.word	0x08001703
 8001668:	08001703 	.word	0x08001703
 800166c:	08001703 	.word	0x08001703
 8001670:	08001703 	.word	0x08001703
 8001674:	08001703 	.word	0x08001703
 8001678:	08001703 	.word	0x08001703
 800167c:	08001703 	.word	0x08001703
 8001680:	08001703 	.word	0x08001703
 8001684:	08001703 	.word	0x08001703
 8001688:	08001703 	.word	0x08001703
 800168c:	08001703 	.word	0x08001703
 8001690:	08001703 	.word	0x08001703
 8001694:	08001703 	.word	0x08001703
 8001698:	080016b1 	.word	0x080016b1
 800169c:	080016c5 	.word	0x080016c5
 80016a0:	4a79      	ldr	r2, [pc, #484]	; (8001888 <HAL_GPIO_Init+0x2b4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016a6:	e02c      	b.n	8001702 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	623b      	str	r3, [r7, #32]
          break;
 80016ae:	e029      	b.n	8001704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	3304      	adds	r3, #4
 80016b6:	623b      	str	r3, [r7, #32]
          break;
 80016b8:	e024      	b.n	8001704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	3308      	adds	r3, #8
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e01f      	b.n	8001704 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	330c      	adds	r3, #12
 80016ca:	623b      	str	r3, [r7, #32]
          break;
 80016cc:	e01a      	b.n	8001704 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016d6:	2304      	movs	r3, #4
 80016d8:	623b      	str	r3, [r7, #32]
          break;
 80016da:	e013      	b.n	8001704 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d105      	bne.n	80016f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e4:	2308      	movs	r3, #8
 80016e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	611a      	str	r2, [r3, #16]
          break;
 80016ee:	e009      	b.n	8001704 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f0:	2308      	movs	r3, #8
 80016f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	615a      	str	r2, [r3, #20]
          break;
 80016fa:	e003      	b.n	8001704 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
          break;
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x130>
          break;
 8001702:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2bff      	cmp	r3, #255	; 0xff
 8001708:	d801      	bhi.n	800170e <HAL_GPIO_Init+0x13a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	e001      	b.n	8001712 <HAL_GPIO_Init+0x13e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3304      	adds	r3, #4
 8001712:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2bff      	cmp	r3, #255	; 0xff
 8001718:	d802      	bhi.n	8001720 <HAL_GPIO_Init+0x14c>
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x152>
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	3b08      	subs	r3, #8
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	210f      	movs	r1, #15
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	401a      	ands	r2, r3
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	431a      	orrs	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80b1 	beq.w	80018b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001754:	4b4d      	ldr	r3, [pc, #308]	; (800188c <HAL_GPIO_Init+0x2b8>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a4c      	ldr	r2, [pc, #304]	; (800188c <HAL_GPIO_Init+0x2b8>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b4a      	ldr	r3, [pc, #296]	; (800188c <HAL_GPIO_Init+0x2b8>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800176c:	4a48      	ldr	r2, [pc, #288]	; (8001890 <HAL_GPIO_Init+0x2bc>)
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001778:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a40      	ldr	r2, [pc, #256]	; (8001894 <HAL_GPIO_Init+0x2c0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d013      	beq.n	80017c0 <HAL_GPIO_Init+0x1ec>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3f      	ldr	r2, [pc, #252]	; (8001898 <HAL_GPIO_Init+0x2c4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00d      	beq.n	80017bc <HAL_GPIO_Init+0x1e8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a3e      	ldr	r2, [pc, #248]	; (800189c <HAL_GPIO_Init+0x2c8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d007      	beq.n	80017b8 <HAL_GPIO_Init+0x1e4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3d      	ldr	r2, [pc, #244]	; (80018a0 <HAL_GPIO_Init+0x2cc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d101      	bne.n	80017b4 <HAL_GPIO_Init+0x1e0>
 80017b0:	2303      	movs	r3, #3
 80017b2:	e006      	b.n	80017c2 <HAL_GPIO_Init+0x1ee>
 80017b4:	2304      	movs	r3, #4
 80017b6:	e004      	b.n	80017c2 <HAL_GPIO_Init+0x1ee>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x1ee>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_GPIO_Init+0x1ee>
 80017c0:	2300      	movs	r3, #0
 80017c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c4:	f002 0203 	and.w	r2, r2, #3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4093      	lsls	r3, r2
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017d2:	492f      	ldr	r1, [pc, #188]	; (8001890 <HAL_GPIO_Init+0x2bc>)
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ec:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	492c      	ldr	r1, [pc, #176]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	4928      	ldr	r1, [pc, #160]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 8001804:	4013      	ands	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4922      	ldr	r1, [pc, #136]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	491e      	ldr	r1, [pc, #120]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 800182c:	4013      	ands	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4918      	ldr	r1, [pc, #96]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	43db      	mvns	r3, r3
 8001852:	4914      	ldr	r1, [pc, #80]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 8001854:	4013      	ands	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d021      	beq.n	80018a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	490e      	ldr	r1, [pc, #56]	; (80018a4 <HAL_GPIO_Init+0x2d0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e021      	b.n	80018b6 <HAL_GPIO_Init+0x2e2>
 8001872:	bf00      	nop
 8001874:	10320000 	.word	0x10320000
 8001878:	10310000 	.word	0x10310000
 800187c:	10220000 	.word	0x10220000
 8001880:	10210000 	.word	0x10210000
 8001884:	10120000 	.word	0x10120000
 8001888:	10110000 	.word	0x10110000
 800188c:	40021000 	.word	0x40021000
 8001890:	40010000 	.word	0x40010000
 8001894:	40010800 	.word	0x40010800
 8001898:	40010c00 	.word	0x40010c00
 800189c:	40011000 	.word	0x40011000
 80018a0:	40011400 	.word	0x40011400
 80018a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_GPIO_Init+0x304>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	4909      	ldr	r1, [pc, #36]	; (80018d8 <HAL_GPIO_Init+0x304>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	3301      	adds	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f47f ae8e 	bne.w	80015e8 <HAL_GPIO_Init+0x14>
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	372c      	adds	r7, #44	; 0x2c
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	611a      	str	r2, [r3, #16]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43d9      	mvns	r1, r3
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	400b      	ands	r3, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	611a      	str	r2, [r3, #16]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
	...

08001940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e272      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8087 	beq.w	8001a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b04      	cmp	r3, #4
 800196a:	d00c      	beq.n	8001986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800196c:	4b8f      	ldr	r3, [pc, #572]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d112      	bne.n	800199e <HAL_RCC_OscConfig+0x5e>
 8001978:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001984:	d10b      	bne.n	800199e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d06c      	beq.n	8001a6c <HAL_RCC_OscConfig+0x12c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d168      	bne.n	8001a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e24c      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x76>
 80019a8:	4b80      	ldr	r3, [pc, #512]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a7f      	ldr	r2, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e02e      	b.n	8001a14 <HAL_RCC_OscConfig+0xd4>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x98>
 80019be:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a7a      	ldr	r2, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b78      	ldr	r3, [pc, #480]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a77      	ldr	r2, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e01d      	b.n	8001a14 <HAL_RCC_OscConfig+0xd4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0xbc>
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a71      	ldr	r2, [pc, #452]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e00b      	b.n	8001a14 <HAL_RCC_OscConfig+0xd4>
 80019fc:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b68      	ldr	r3, [pc, #416]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a67      	ldr	r2, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d013      	beq.n	8001a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7fe fee4 	bl	80007e8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7fe fee0 	bl	80007e8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e200      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0xe4>
 8001a42:	e014      	b.n	8001a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe fed0 	bl	80007e8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7fe fecc 	bl	80007e8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1ec      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5e:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x10c>
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d063      	beq.n	8001b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7a:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a86:	4b49      	ldr	r3, [pc, #292]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d11c      	bne.n	8001acc <HAL_RCC_OscConfig+0x18c>
 8001a92:	4b46      	ldr	r3, [pc, #280]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d116      	bne.n	8001acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x176>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e1c0      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4939      	ldr	r1, [pc, #228]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	e03a      	b.n	8001b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7fe fe85 	bl	80007e8 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7fe fe81 	bl	80007e8 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1a1      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4927      	ldr	r1, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_RCC_OscConfig+0x270>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe fe64 	bl	80007e8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b24:	f7fe fe60 	bl	80007e8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e180      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d03a      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d019      	beq.n	8001b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7fe fe44 	bl	80007e8 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7fe fe40 	bl	80007e8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e160      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f000 fa9c 	bl	80020c0 <RCC_Delay>
 8001b88:	e01c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7fe fe2a 	bl	80007e8 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b96:	e00f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7fe fe26 	bl	80007e8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d908      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e146      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	42420000 	.word	0x42420000
 8001bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1e9      	bne.n	8001b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80a6 	beq.w	8001d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10d      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a87      	ldr	r2, [pc, #540]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	61d3      	str	r3, [r2, #28]
 8001bee:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <HAL_RCC_OscConfig+0x4c8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x4c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7e      	ldr	r2, [pc, #504]	; (8001e08 <HAL_RCC_OscConfig+0x4c8>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7fe fde7 	bl	80007e8 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7fe fde3 	bl	80007e8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b64      	cmp	r3, #100	; 0x64
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e103      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4c8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x312>
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a6e      	ldr	r2, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	e02d      	b.n	8001cae <HAL_RCC_OscConfig+0x36e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x334>
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6213      	str	r3, [r2, #32]
 8001c72:	e01c      	b.n	8001cae <HAL_RCC_OscConfig+0x36e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_OscConfig+0x356>
 8001c7c:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a60      	ldr	r2, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	e00b      	b.n	8001cae <HAL_RCC_OscConfig+0x36e>
 8001c96:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d015      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7fe fd97 	bl	80007e8 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7fe fd93 	bl	80007e8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0b1      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0ee      	beq.n	8001cbe <HAL_RCC_OscConfig+0x37e>
 8001ce0:	e014      	b.n	8001d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce2:	f7fe fd81 	bl	80007e8 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7fe fd7d 	bl	80007e8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e09b      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d00:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ee      	bne.n	8001cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d105      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8087 	beq.w	8001e36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d061      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d146      	bne.n	8001dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7fe fd51 	bl	80007e8 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe fd4d 	bl	80007e8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e06d      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d108      	bne.n	8001d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4921      	ldr	r1, [pc, #132]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a19      	ldr	r1, [r3, #32]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	430b      	orrs	r3, r1
 8001d96:	491b      	ldr	r1, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7fe fd21 	bl	80007e8 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe fd1d 	bl	80007e8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e03d      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x46a>
 8001dc8:	e035      	b.n	8001e36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fd0a 	bl	80007e8 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe fd06 	bl	80007e8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e026      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x498>
 8001df6:	e01e      	b.n	8001e36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e019      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_OscConfig+0x500>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0d0      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	4965      	ldr	r1, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b8      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d040      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d115      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e073      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06b      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4936      	ldr	r1, [pc, #216]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7fe fc58 	bl	80007e8 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7fe fc54 	bl	80007e8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e053      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 020c 	and.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1eb      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d210      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4922      	ldr	r1, [pc, #136]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e032      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f821 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	490a      	ldr	r1, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	5ccb      	ldrb	r3, [r1, r3]
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1cc>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fbb6 	bl	8000764 <HAL_InitTick>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	080030e4 	.word	0x080030e4
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x30>
 8002042:	2b08      	cmp	r3, #8
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x36>
 8002046:	e027      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800204a:	613b      	str	r3, [r7, #16]
      break;
 800204c:	e027      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0c9b      	lsrs	r3, r3, #18
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	0c5b      	lsrs	r3, r3, #17
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800207a:	fb03 f202 	mul.w	r2, r3, r2
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e004      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	613b      	str	r3, [r7, #16]
      break;
 8002096:	e002      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800209a:	613b      	str	r3, [r7, #16]
      break;
 800209c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209e:	693b      	ldr	r3, [r7, #16]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	080030f4 	.word	0x080030f4
 80020b8:	08003104 	.word	0x08003104
 80020bc:	003d0900 	.word	0x003d0900

080020c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <RCC_Delay+0x34>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <RCC_Delay+0x38>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0a5b      	lsrs	r3, r3, #9
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020dc:	bf00      	nop
  }
  while (Delay --);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1e5a      	subs	r2, r3, #1
 80020e2:	60fa      	str	r2, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f9      	bne.n	80020dc <RCC_Delay+0x1c>
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	20000000 	.word	0x20000000
 80020f8:	10624dd3 	.word	0x10624dd3

080020fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d07d      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211c:	4b4f      	ldr	r3, [pc, #316]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	4a4b      	ldr	r2, [pc, #300]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002132:	61d3      	str	r3, [r2, #28]
 8002134:	4b49      	ldr	r3, [pc, #292]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002140:	2301      	movs	r3, #1
 8002142:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d118      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002150:	4b43      	ldr	r3, [pc, #268]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a42      	ldr	r2, [pc, #264]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215c:	f7fe fb44 	bl	80007e8 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	e008      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7fe fb40 	bl	80007e8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e06d      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002182:	4b36      	ldr	r3, [pc, #216]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d02e      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d027      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021b6:	4a29      	ldr	r2, [pc, #164]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d014      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fb0f 	bl	80007e8 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe fb0b 	bl	80007e8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e036      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4917      	ldr	r1, [pc, #92]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a13      	ldr	r2, [pc, #76]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002212:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	490b      	ldr	r1, [pc, #44]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	4904      	ldr	r1, [pc, #16]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	40007000 	.word	0x40007000
 8002264:	42420440 	.word	0x42420440

08002268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e041      	b.n	80022fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe f9de 	bl	8000650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f000 f8f4 	bl	8002494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_TIM_ConfigClockSource+0x1c>
 800231e:	2302      	movs	r3, #2
 8002320:	e0b4      	b.n	800248c <HAL_TIM_ConfigClockSource+0x186>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002340:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002348:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235a:	d03e      	beq.n	80023da <HAL_TIM_ConfigClockSource+0xd4>
 800235c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002360:	f200 8087 	bhi.w	8002472 <HAL_TIM_ConfigClockSource+0x16c>
 8002364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002368:	f000 8086 	beq.w	8002478 <HAL_TIM_ConfigClockSource+0x172>
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002370:	d87f      	bhi.n	8002472 <HAL_TIM_ConfigClockSource+0x16c>
 8002372:	2b70      	cmp	r3, #112	; 0x70
 8002374:	d01a      	beq.n	80023ac <HAL_TIM_ConfigClockSource+0xa6>
 8002376:	2b70      	cmp	r3, #112	; 0x70
 8002378:	d87b      	bhi.n	8002472 <HAL_TIM_ConfigClockSource+0x16c>
 800237a:	2b60      	cmp	r3, #96	; 0x60
 800237c:	d050      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0x11a>
 800237e:	2b60      	cmp	r3, #96	; 0x60
 8002380:	d877      	bhi.n	8002472 <HAL_TIM_ConfigClockSource+0x16c>
 8002382:	2b50      	cmp	r3, #80	; 0x50
 8002384:	d03c      	beq.n	8002400 <HAL_TIM_ConfigClockSource+0xfa>
 8002386:	2b50      	cmp	r3, #80	; 0x50
 8002388:	d873      	bhi.n	8002472 <HAL_TIM_ConfigClockSource+0x16c>
 800238a:	2b40      	cmp	r3, #64	; 0x40
 800238c:	d058      	beq.n	8002440 <HAL_TIM_ConfigClockSource+0x13a>
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d86f      	bhi.n	8002472 <HAL_TIM_ConfigClockSource+0x16c>
 8002392:	2b30      	cmp	r3, #48	; 0x30
 8002394:	d064      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x15a>
 8002396:	2b30      	cmp	r3, #48	; 0x30
 8002398:	d86b      	bhi.n	8002472 <HAL_TIM_ConfigClockSource+0x16c>
 800239a:	2b20      	cmp	r3, #32
 800239c:	d060      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x15a>
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d867      	bhi.n	8002472 <HAL_TIM_ConfigClockSource+0x16c>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d05c      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x15a>
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d05a      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x15a>
 80023aa:	e062      	b.n	8002472 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023bc:	f000 f94f 	bl	800265e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
      break;
 80023d8:	e04f      	b.n	800247a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023ea:	f000 f938 	bl	800265e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fc:	609a      	str	r2, [r3, #8]
      break;
 80023fe:	e03c      	b.n	800247a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240c:	461a      	mov	r2, r3
 800240e:	f000 f8af 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2150      	movs	r1, #80	; 0x50
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f906 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 800241e:	e02c      	b.n	800247a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800242c:	461a      	mov	r2, r3
 800242e:	f000 f8cd 	bl	80025cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2160      	movs	r1, #96	; 0x60
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f8f6 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 800243e:	e01c      	b.n	800247a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800244c:	461a      	mov	r2, r3
 800244e:	f000 f88f 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f8e6 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 800245e:	e00c      	b.n	800247a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 f8dd 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 8002470:	e003      	b.n	800247a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      break;
 8002476:	e000      	b.n	800247a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002478:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <TIM_Base_SetConfig+0xd0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b2:	d007      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <TIM_Base_SetConfig+0xd4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a2b      	ldr	r2, [pc, #172]	; (800256c <TIM_Base_SetConfig+0xd8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d108      	bne.n	80024d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a22      	ldr	r2, [pc, #136]	; (8002564 <TIM_Base_SetConfig+0xd0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00b      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d007      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <TIM_Base_SetConfig+0xd4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <TIM_Base_SetConfig+0xd8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <TIM_Base_SetConfig+0xd0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d103      	bne.n	800253c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f023 0201 	bic.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	611a      	str	r2, [r3, #16]
  }
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800

08002570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0201 	bic.w	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f023 030a 	bic.w	r3, r3, #10
 80025ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	f023 0210 	bic.w	r2, r3, #16
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	031b      	lsls	r3, r3, #12
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002608:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	621a      	str	r2, [r3, #32]
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	f043 0307 	orr.w	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	609a      	str	r2, [r3, #8]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800265e:	b480      	push	{r7}
 8002660:	b087      	sub	sp, #28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002678:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	021a      	lsls	r2, r3, #8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	431a      	orrs	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4313      	orrs	r3, r2
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	609a      	str	r2, [r3, #8]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e046      	b.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a16      	ldr	r2, [pc, #88]	; (800274c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00e      	beq.n	8002716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d009      	beq.n	8002716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10c      	bne.n	8002730 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4313      	orrs	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800

08002758 <elapsed_timer_reset>:
}elapsed_timer_t;
/**
 * @brief
 * @param _self
 */
static inline void elapsed_timer_reset(elapsed_timer_t* _self){
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    _self->m_start_time = get_tick_count();
 8002760:	f000 f82f 	bl	80027c2 <get_tick_count>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	605a      	str	r2, [r3, #4]
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <elapsed_timer_get_remain>:
/**
 * @brief
 * @param _self
 * @return
 */
static inline int32_t elapsed_timer_get_remain(elapsed_timer_t* _self){
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
    int32_t remain_time = get_tick_count() - _self->m_start_time;
 800277c:	f000 f821 	bl	80027c2 <get_tick_count>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	60fb      	str	r3, [r7, #12]
    if(remain_time >= _self->m_duration || _self->m_start_time > get_tick_count()){
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	429a      	cmp	r2, r3
 8002794:	da0b      	bge.n	80027ae <elapsed_timer_get_remain+0x3a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	17da      	asrs	r2, r3, #31
 800279c:	461c      	mov	r4, r3
 800279e:	4615      	mov	r5, r2
 80027a0:	f000 f80f 	bl	80027c2 <get_tick_count>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	42a2      	cmp	r2, r4
 80027aa:	41ab      	sbcs	r3, r5
 80027ac:	da01      	bge.n	80027b2 <elapsed_timer_get_remain+0x3e>
        return 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e003      	b.n	80027ba <elapsed_timer_get_remain+0x46>
    }else{
        return _self->m_duration - remain_time;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
    }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bdb0      	pop	{r4, r5, r7, pc}

080027c2 <get_tick_count>:

#define FILTER_COUNT	50

#define SAMPLING_MS		10

int64_t get_tick_count(){
 80027c2:	b5b0      	push	{r4, r5, r7, lr}
 80027c4:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80027c6:	f7fe f80f 	bl	80007e8 <HAL_GetTick>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2200      	movs	r2, #0
 80027ce:	461c      	mov	r4, r3
 80027d0:	4615      	mov	r5, r2
 80027d2:	4622      	mov	r2, r4
 80027d4:	462b      	mov	r3, r5
}
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	bdb0      	pop	{r4, r5, r7, pc}

080027dc <load_vol_lower_12v_filter>:
bool g_is_charger_over_vol;
bool g_is_charger_under_vol;



void load_vol_lower_12v_filter(){
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	static uint32_t count = 0;

	if(adc_sv_get_load_vol() <= 12000){
 80027e0:	f000 fa06 	bl	8002bf0 <adc_sv_get_load_vol>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d805      	bhi.n	80027fa <load_vol_lower_12v_filter+0x1e>
		count++;
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <load_vol_lower_12v_filter+0x3c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	4a08      	ldr	r2, [pc, #32]	; (8002818 <load_vol_lower_12v_filter+0x3c>)
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e005      	b.n	8002806 <load_vol_lower_12v_filter+0x2a>
	}else{
		g_is_load_lower_12v = 0;
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <load_vol_lower_12v_filter+0x40>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
		count = 0;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <load_vol_lower_12v_filter+0x3c>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
	}

	if(count > FILTER_COUNT){
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <load_vol_lower_12v_filter+0x3c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b32      	cmp	r3, #50	; 0x32
 800280c:	d902      	bls.n	8002814 <load_vol_lower_12v_filter+0x38>
		g_is_load_lower_12v = true;
 800280e:	4b03      	ldr	r3, [pc, #12]	; (800281c <load_vol_lower_12v_filter+0x40>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
	}

}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200000fc 	.word	0x200000fc
 800281c:	200000f1 	.word	0x200000f1

08002820 <load_vol_upper_16v_filter>:

void load_vol_upper_16v_filter(){
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	static uint32_t count = 0;

	if(adc_sv_get_load_vol() >= 16000){
 8002824:	f000 f9e4 	bl	8002bf0 <adc_sv_get_load_vol>
 8002828:	4603      	mov	r3, r0
 800282a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800282e:	d305      	bcc.n	800283c <load_vol_upper_16v_filter+0x1c>
		count++;
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <load_vol_upper_16v_filter+0x3c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <load_vol_upper_16v_filter+0x3c>)
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e005      	b.n	8002848 <load_vol_upper_16v_filter+0x28>
	}else{
		g_is_load_upper_16v = 0;
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <load_vol_upper_16v_filter+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
		count = 0;
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <load_vol_upper_16v_filter+0x3c>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
	}

	if(count > FILTER_COUNT){
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <load_vol_upper_16v_filter+0x3c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b32      	cmp	r3, #50	; 0x32
 800284e:	d902      	bls.n	8002856 <load_vol_upper_16v_filter+0x36>
		g_is_load_upper_16v = true;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <load_vol_upper_16v_filter+0x40>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
	}
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000100 	.word	0x20000100
 8002860:	200000f2 	.word	0x200000f2

08002864 <bank_a_vol_lower_16_filter>:

void bank_a_vol_lower_16_filter(){
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	static uint32_t count = 0;

	if(adc_sv_get_bank_a_vol() <= 15500){
 8002868:	f000 f9e4 	bl	8002c34 <adc_sv_get_bank_a_vol>
 800286c:	4603      	mov	r3, r0
 800286e:	f643 428c 	movw	r2, #15500	; 0x3c8c
 8002872:	4293      	cmp	r3, r2
 8002874:	d805      	bhi.n	8002882 <bank_a_vol_lower_16_filter+0x1e>
		count++;
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <bank_a_vol_lower_16_filter+0x3c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3301      	adds	r3, #1
 800287c:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <bank_a_vol_lower_16_filter+0x3c>)
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e005      	b.n	800288e <bank_a_vol_lower_16_filter+0x2a>
	}else{
		g_is_bank_a_lower_15_5v = 0;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <bank_a_vol_lower_16_filter+0x40>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
		count = 0;
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <bank_a_vol_lower_16_filter+0x3c>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
	}

	if(count > FILTER_COUNT){
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <bank_a_vol_lower_16_filter+0x3c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b32      	cmp	r3, #50	; 0x32
 8002894:	d902      	bls.n	800289c <bank_a_vol_lower_16_filter+0x38>
		g_is_bank_a_lower_15_5v = true;
 8002896:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <bank_a_vol_lower_16_filter+0x40>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
	}
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000104 	.word	0x20000104
 80028a4:	200000f3 	.word	0x200000f3

080028a8 <bank_b_vol_upper_4v_filter>:

void bank_b_vol_upper_4v_filter(){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	static uint32_t count = 0;

	if(adc_sv_get_bank_b_vol() >= 3950){
 80028ac:	f000 f9e8 	bl	8002c80 <adc_sv_get_bank_b_vol>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f640 726d 	movw	r2, #3949	; 0xf6d
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d905      	bls.n	80028c6 <bank_b_vol_upper_4v_filter+0x1e>
		count++;
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <bank_b_vol_upper_4v_filter+0x3c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <bank_b_vol_upper_4v_filter+0x3c>)
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	e005      	b.n	80028d2 <bank_b_vol_upper_4v_filter+0x2a>
	}else{
		count = 0;
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <bank_b_vol_upper_4v_filter+0x3c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
		g_is_bank_b_lower_4v = false;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <bank_b_vol_upper_4v_filter+0x40>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
	}

	if(count > FILTER_COUNT){
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <bank_b_vol_upper_4v_filter+0x3c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b32      	cmp	r3, #50	; 0x32
 80028d8:	d902      	bls.n	80028e0 <bank_b_vol_upper_4v_filter+0x38>
		g_is_bank_b_lower_4v = true;
 80028da:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <bank_b_vol_upper_4v_filter+0x40>)
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
	}
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000108 	.word	0x20000108
 80028e8:	200000f4 	.word	0x200000f4

080028ec <load_vol_out_range_filter>:

void load_vol_out_range_filter(){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
	static uint32_t count = 0;
	uint32_t load_vol = adc_sv_get_load_vol();
 80028f2:	f000 f97d 	bl	8002bf0 <adc_sv_get_load_vol>
 80028f6:	6078      	str	r0, [r7, #4]

	if(load_vol <= 11500 || load_vol >= 16200){
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f642 42ec 	movw	r2, #11500	; 0x2cec
 80028fe:	4293      	cmp	r3, r2
 8002900:	d904      	bls.n	800290c <load_vol_out_range_filter+0x20>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f643 7247 	movw	r2, #16199	; 0x3f47
 8002908:	4293      	cmp	r3, r2
 800290a:	d905      	bls.n	8002918 <load_vol_out_range_filter+0x2c>
		count++;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <load_vol_out_range_filter+0x68>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	4a10      	ldr	r2, [pc, #64]	; (8002954 <load_vol_out_range_filter+0x68>)
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e008      	b.n	800292a <load_vol_out_range_filter+0x3e>
	}else{
		count = 0;
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <load_vol_out_range_filter+0x68>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
		g_is_load_under_vol = false;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <load_vol_out_range_filter+0x6c>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
		g_is_load_over_vol = false;
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <load_vol_out_range_filter+0x70>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
	}

	if(count > FILTER_COUNT){
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <load_vol_out_range_filter+0x68>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b32      	cmp	r3, #50	; 0x32
 8002930:	d90b      	bls.n	800294a <load_vol_out_range_filter+0x5e>
		if(load_vol <= 11500){
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f642 42ec 	movw	r2, #11500	; 0x2cec
 8002938:	4293      	cmp	r3, r2
 800293a:	d803      	bhi.n	8002944 <load_vol_out_range_filter+0x58>
			g_is_load_under_vol = true;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <load_vol_out_range_filter+0x6c>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
		}else{
			g_is_load_over_vol = true;
		}
	}
}
 8002942:	e002      	b.n	800294a <load_vol_out_range_filter+0x5e>
			g_is_load_over_vol = true;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <load_vol_out_range_filter+0x70>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000010c 	.word	0x2000010c
 8002958:	200000f6 	.word	0x200000f6
 800295c:	200000f5 	.word	0x200000f5

08002960 <charger_vol_out_range_filter>:


void charger_vol_out_range_filter(){
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
	static uint32_t count = 0;
	uint32_t charger_vol = adc_sv_get_charger_vol();
 8002966:	f000 f9ab 	bl	8002cc0 <adc_sv_get_charger_vol>
 800296a:	6078      	str	r0, [r7, #4]

	if(charger_vol <= 12000 || charger_vol >= 20000){
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002972:	4293      	cmp	r3, r2
 8002974:	d904      	bls.n	8002980 <charger_vol_out_range_filter+0x20>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800297c:	4293      	cmp	r3, r2
 800297e:	d905      	bls.n	800298c <charger_vol_out_range_filter+0x2c>
		count++;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <charger_vol_out_range_filter+0x68>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3301      	adds	r3, #1
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <charger_vol_out_range_filter+0x68>)
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e008      	b.n	800299e <charger_vol_out_range_filter+0x3e>
	}else{
		count = 0;
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <charger_vol_out_range_filter+0x68>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
		g_is_charger_under_vol = false;
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <charger_vol_out_range_filter+0x6c>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
		g_is_charger_over_vol = false;
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <charger_vol_out_range_filter+0x70>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
	}

	if(count > FILTER_COUNT){
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <charger_vol_out_range_filter+0x68>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b32      	cmp	r3, #50	; 0x32
 80029a4:	d90b      	bls.n	80029be <charger_vol_out_range_filter+0x5e>
		if(charger_vol <= 12000){
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d803      	bhi.n	80029b8 <charger_vol_out_range_filter+0x58>
			g_is_charger_under_vol = true;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <charger_vol_out_range_filter+0x6c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
		}else{
			g_is_charger_over_vol = true;
		}
	}
}
 80029b6:	e002      	b.n	80029be <charger_vol_out_range_filter+0x5e>
			g_is_charger_over_vol = true;
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <charger_vol_out_range_filter+0x70>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000110 	.word	0x20000110
 80029cc:	200000f8 	.word	0x200000f8
 80029d0:	200000f7 	.word	0x200000f7

080029d4 <control_latch_relay_soc_led_and_status>:
void control_latch_relay_soc_led_and_status(){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	if(g_is_load_lower_12v){
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <control_latch_relay_soc_led_and_status+0x7c>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <control_latch_relay_soc_led_and_status+0x1e>
		io_sv_open_latch();
 80029e0:	f000 fae8 	bl	8002fb4 <io_sv_open_latch>
		io_sv_set_led_status(100);
 80029e4:	2064      	movs	r0, #100	; 0x64
 80029e6:	f000 faa9 	bl	8002f3c <io_sv_set_led_status>
		g_mode = MODE_DISCH;
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <control_latch_relay_soc_led_and_status+0x80>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
			io_sv_set_led_status(0);
			io_sv_set_val(IO_CTRL_RELAY_EXT, 1);
			io_sv_set_val(IO_CTRL_WARN_LED, 1);
		}
	}
}
 80029f0:	e02b      	b.n	8002a4a <control_latch_relay_soc_led_and_status+0x76>
	}else if(g_is_load_lower_12v){
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <control_latch_relay_soc_led_and_status+0x7c>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d027      	beq.n	8002a4a <control_latch_relay_soc_led_and_status+0x76>
		if(g_mode != MODE_BOOST && g_mode != MODE_FLAT && g_is_firt_time_under_12v){
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <control_latch_relay_soc_led_and_status+0x80>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d013      	beq.n	8002a2a <control_latch_relay_soc_led_and_status+0x56>
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <control_latch_relay_soc_led_and_status+0x80>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d00f      	beq.n	8002a2a <control_latch_relay_soc_led_and_status+0x56>
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <control_latch_relay_soc_led_and_status+0x84>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <control_latch_relay_soc_led_and_status+0x56>
			g_is_firt_time_under_12v = false;
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <control_latch_relay_soc_led_and_status+0x84>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
			g_mode = MODE_BOOST;
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <control_latch_relay_soc_led_and_status+0x80>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
			io_sv_open_latch();
 8002a1e:	f000 fac9 	bl	8002fb4 <io_sv_open_latch>
			io_sv_set_led_status(50);
 8002a22:	2032      	movs	r0, #50	; 0x32
 8002a24:	f000 fa8a 	bl	8002f3c <io_sv_set_led_status>
}
 8002a28:	e00f      	b.n	8002a4a <control_latch_relay_soc_led_and_status+0x76>
			g_mode = MODE_FLAT;
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <control_latch_relay_soc_led_and_status+0x80>)
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	701a      	strb	r2, [r3, #0]
			io_sv_close_latch();
 8002a30:	f000 fae0 	bl	8002ff4 <io_sv_close_latch>
			io_sv_set_led_status(0);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f000 fa81 	bl	8002f3c <io_sv_set_led_status>
			io_sv_set_val(IO_CTRL_RELAY_EXT, 1);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	200e      	movs	r0, #14
 8002a3e:	f000 f9a7 	bl	8002d90 <io_sv_set_val>
			io_sv_set_val(IO_CTRL_WARN_LED, 1);
 8002a42:	2101      	movs	r1, #1
 8002a44:	2004      	movs	r0, #4
 8002a46:	f000 f9a3 	bl	8002d90 <io_sv_set_val>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200000f1 	.word	0x200000f1
 8002a54:	200000f0 	.word	0x200000f0
 8002a58:	20000009 	.word	0x20000009

08002a5c <control_charger_switch_soc_led_set_mode>:

void control_charger_switch_soc_led_set_mode(){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	if(g_is_bank_b_lower_4v){
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <control_charger_switch_soc_led_set_mode+0x48>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d014      	beq.n	8002a92 <control_charger_switch_soc_led_set_mode+0x36>
		if(g_is_bank_a_lower_15_5v){
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <control_charger_switch_soc_led_set_mode+0x4c>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d006      	beq.n	8002a7e <control_charger_switch_soc_led_set_mode+0x22>
			io_sv_ctrl_normal_charger(0);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 fa3b 	bl	8002eec <io_sv_ctrl_normal_charger>
			io_sv_ctrl_fast_charger(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f000 fa4c 	bl	8002f14 <io_sv_ctrl_fast_charger>
		}
	}else{
		io_sv_ctrl_normal_charger(1);
		io_sv_ctrl_fast_charger(0);
	}
}
 8002a7c:	e00f      	b.n	8002a9e <control_charger_switch_soc_led_set_mode+0x42>
			io_sv_ctrl_normal_charger(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f000 fa34 	bl	8002eec <io_sv_ctrl_normal_charger>
			io_sv_ctrl_fast_charger(0);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f000 fa45 	bl	8002f14 <io_sv_ctrl_fast_charger>
			io_sv_set_led_status(100);
 8002a8a:	2064      	movs	r0, #100	; 0x64
 8002a8c:	f000 fa56 	bl	8002f3c <io_sv_set_led_status>
}
 8002a90:	e005      	b.n	8002a9e <control_charger_switch_soc_led_set_mode+0x42>
		io_sv_ctrl_normal_charger(1);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f000 fa2a 	bl	8002eec <io_sv_ctrl_normal_charger>
		io_sv_ctrl_fast_charger(0);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f000 fa3b 	bl	8002f14 <io_sv_ctrl_fast_charger>
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200000f4 	.word	0x200000f4
 8002aa8:	200000f3 	.word	0x200000f3

08002aac <monitor_load_charging_vol_set_warn_led>:

void monitor_load_charging_vol_set_warn_led(){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
	uint8_t err = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	71fb      	strb	r3, [r7, #7]
	if(g_is_load_over_vol){
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <monitor_load_charging_vol_set_warn_led+0x7c>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <monitor_load_charging_vol_set_warn_led+0x22>
		err = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	71fb      	strb	r3, [r7, #7]
		io_sv_ctrl_normal_charger(0);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f000 fa12 	bl	8002eec <io_sv_ctrl_normal_charger>
		io_sv_ctrl_fast_charger(0);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f000 fa23 	bl	8002f14 <io_sv_ctrl_fast_charger>
	}

	if(g_is_charger_over_vol){
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <monitor_load_charging_vol_set_warn_led+0x80>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <monitor_load_charging_vol_set_warn_led+0x3a>
		err = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	71fb      	strb	r3, [r7, #7]
		io_sv_ctrl_normal_charger(0);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f000 fa06 	bl	8002eec <io_sv_ctrl_normal_charger>
		io_sv_ctrl_fast_charger(0);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f000 fa17 	bl	8002f14 <io_sv_ctrl_fast_charger>
	}

	if(g_is_load_under_vol){
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <monitor_load_charging_vol_set_warn_led+0x84>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <monitor_load_charging_vol_set_warn_led+0x52>
		err = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	71fb      	strb	r3, [r7, #7]
		io_sv_ctrl_normal_charger(1);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f000 f9fa 	bl	8002eec <io_sv_ctrl_normal_charger>
		io_sv_ctrl_fast_charger(0);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f000 fa0b 	bl	8002f14 <io_sv_ctrl_fast_charger>
	}

	if(g_is_charger_under_vol){
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <monitor_load_charging_vol_set_warn_led+0x88>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <monitor_load_charging_vol_set_warn_led+0x6a>
		err = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	71fb      	strb	r3, [r7, #7]
		io_sv_ctrl_normal_charger(1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f000 f9ee 	bl	8002eec <io_sv_ctrl_normal_charger>
		io_sv_ctrl_fast_charger(0);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 f9ff 	bl	8002f14 <io_sv_ctrl_fast_charger>
	}

	io_sv_set_val(IO_CTRL_WARN_LED, err);
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	2004      	movs	r0, #4
 8002b1c:	f000 f938 	bl	8002d90 <io_sv_set_val>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200000f5 	.word	0x200000f5
 8002b2c:	200000f7 	.word	0x200000f7
 8002b30:	200000f6 	.word	0x200000f6
 8002b34:	200000f8 	.word	0x200000f8

08002b38 <main_app>:

void main_app(){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
	adc_sv_init();
 8002b3e:	f000 f849 	bl	8002bd4 <adc_sv_init>
	io_sv_init();
 8002b42:	f000 f918 	bl	8002d76 <io_sv_init>

	HAL_Delay(500);
 8002b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b4a:	f7fd fe57 	bl	80007fc <HAL_Delay>

	elapsed_timer_t sampling_timer = {.m_duration = SAMPLING_MS, .m_start_time = 0};
 8002b4e:	230a      	movs	r3, #10
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]

	while(1){
		if(!elapsed_timer_get_remain(&sampling_timer)){ // debound 1ms run 1 time
 8002b56:	463b      	mov	r3, r7
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fe0b 	bl	8002774 <elapsed_timer_get_remain>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10f      	bne.n	8002b84 <main_app+0x4c>
			load_vol_lower_12v_filter();
 8002b64:	f7ff fe3a 	bl	80027dc <load_vol_lower_12v_filter>
			load_vol_upper_16v_filter();
 8002b68:	f7ff fe5a 	bl	8002820 <load_vol_upper_16v_filter>
			bank_a_vol_lower_16_filter();
 8002b6c:	f7ff fe7a 	bl	8002864 <bank_a_vol_lower_16_filter>
			bank_b_vol_upper_4v_filter();
 8002b70:	f7ff fe9a 	bl	80028a8 <bank_b_vol_upper_4v_filter>
			load_vol_out_range_filter();
 8002b74:	f7ff feba 	bl	80028ec <load_vol_out_range_filter>
			charger_vol_out_range_filter();
 8002b78:	f7ff fef2 	bl	8002960 <charger_vol_out_range_filter>
			elapsed_timer_reset(&sampling_timer);
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fdea 	bl	8002758 <elapsed_timer_reset>
		}

		control_latch_relay_soc_led_and_status();
 8002b84:	f7ff ff26 	bl	80029d4 <control_latch_relay_soc_led_and_status>
		control_charger_switch_soc_led_set_mode();
 8002b88:	f7ff ff68 	bl	8002a5c <control_charger_switch_soc_led_set_mode>
		monitor_load_charging_vol_set_warn_led();
 8002b8c:	f7ff ff8e 	bl	8002aac <monitor_load_charging_vol_set_warn_led>

		io_sv_process();
 8002b90:	f000 fa4a 	bl	8003028 <io_sv_process>
		if(!elapsed_timer_get_remain(&sampling_timer)){ // debound 1ms run 1 time
 8002b94:	e7df      	b.n	8002b56 <main_app+0x1e>
	...

08002b98 <SysTick_Handler>:
	}
}

void SysTick_Handler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0

  HAL_IncTick();
 8002b9c:	f7fd fe12 	bl	80007c4 <HAL_IncTick>
  if(uwTick % 500 == 0){
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <SysTick_Handler+0x30>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <SysTick_Handler+0x34>)
 8002ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <SysTick_Handler+0x2c>
	  HAL_GPIO_TogglePin(BOARD_TEST_LED_GPIO_Port, BOARD_TEST_LED_Pin);
 8002bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bbe:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <SysTick_Handler+0x38>)
 8002bc0:	f7fe fea4 	bl	800190c <HAL_GPIO_TogglePin>
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200000ec 	.word	0x200000ec
 8002bcc:	10624dd3 	.word	0x10624dd3
 8002bd0:	40011000 	.word	0x40011000

08002bd4 <adc_sv_init>:
	ADC_NUMBER
}ADC_ENUM;

static uint32_t g_adc_value[ADC_NUMBER];

int32_t adc_sv_init(){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, g_adc_value, ADC_NUMBER);
 8002bd8:	2204      	movs	r2, #4
 8002bda:	4903      	ldr	r1, [pc, #12]	; (8002be8 <adc_sv_init+0x14>)
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <adc_sv_init+0x18>)
 8002bde:	f7fd ff09 	bl	80009f4 <HAL_ADC_Start_DMA>
	return 0;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000114 	.word	0x20000114
 8002bec:	20000030 	.word	0x20000030

08002bf0 <adc_sv_get_load_vol>:


uint32_t adc_sv_get_load_vol(){
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
	uint32_t adc_vol = g_adc_value[ADC_LOAD] * MCU_VREF / ADC_RESOLUTIN;
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <adc_sv_get_load_vol+0x38>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002bfe:	fb03 f202 	mul.w	r2, r3, r2
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <adc_sv_get_load_vol+0x3c>)
 8002c04:	fba3 1302 	umull	r1, r3, r3, r2
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	0852      	lsrs	r2, r2, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	0adb      	lsrs	r3, r3, #11
 8002c10:	607b      	str	r3, [r7, #4]
	return adc_vol * (10 + 54) / 10;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <adc_sv_get_load_vol+0x40>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	08db      	lsrs	r3, r3, #3
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000114 	.word	0x20000114
 8002c2c:	00100101 	.word	0x00100101
 8002c30:	cccccccd 	.word	0xcccccccd

08002c34 <adc_sv_get_bank_a_vol>:

uint32_t adc_sv_get_bank_a_vol(){
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
	uint32_t adc_vol = g_adc_value[ADC_BANK_A] * MCU_VREF / ADC_RESOLUTIN;
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <adc_sv_get_bank_a_vol+0x40>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002c42:	fb03 f202 	mul.w	r2, r3, r2
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <adc_sv_get_bank_a_vol+0x44>)
 8002c48:	fba3 1302 	umull	r1, r3, r3, r2
 8002c4c:	1ad2      	subs	r2, r2, r3
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	0adb      	lsrs	r3, r3, #11
 8002c54:	607b      	str	r3, [r7, #4]
	return adc_vol * (10 + 52) / 10;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	015b      	lsls	r3, r3, #5
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <adc_sv_get_bank_a_vol+0x48>)
 8002c64:	fba3 2302 	umull	r2, r3, r3, r2
 8002c68:	08db      	lsrs	r3, r3, #3
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	20000114 	.word	0x20000114
 8002c78:	00100101 	.word	0x00100101
 8002c7c:	cccccccd 	.word	0xcccccccd

08002c80 <adc_sv_get_bank_b_vol>:

uint32_t adc_sv_get_bank_b_vol(){
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
	uint32_t adc_vol = g_adc_value[ADC_BANK_B] * MCU_VREF / ADC_RESOLUTIN;
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <adc_sv_get_bank_b_vol+0x38>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <adc_sv_get_bank_b_vol+0x3c>)
 8002c94:	fba3 1302 	umull	r1, r3, r3, r2
 8002c98:	1ad2      	subs	r2, r2, r3
 8002c9a:	0852      	lsrs	r2, r2, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	0adb      	lsrs	r3, r3, #11
 8002ca0:	607b      	str	r3, [r7, #4]
	return adc_vol * (64 + 37) / 64;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2265      	movs	r2, #101	; 0x65
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	099b      	lsrs	r3, r3, #6
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000114 	.word	0x20000114
 8002cbc:	00100101 	.word	0x00100101

08002cc0 <adc_sv_get_charger_vol>:

uint32_t adc_sv_get_charger_vol(){
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
	uint32_t adc_vol = g_adc_value[ADC_BANK_B] * MCU_VREF / ADC_RESOLUTIN;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <adc_sv_get_charger_vol+0x40>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002cce:	fb03 f202 	mul.w	r2, r3, r2
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <adc_sv_get_charger_vol+0x44>)
 8002cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd8:	1ad2      	subs	r2, r2, r3
 8002cda:	0852      	lsrs	r2, r2, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	607b      	str	r3, [r7, #4]
	return adc_vol * (10 + 49) / 10;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <adc_sv_get_charger_vol+0x48>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	08db      	lsrs	r3, r3, #3
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20000114 	.word	0x20000114
 8002d04:	00100101 	.word	0x00100101
 8002d08:	cccccccd 	.word	0xcccccccd

08002d0c <elapsed_timer_reset>:
static inline void elapsed_timer_reset(elapsed_timer_t* _self){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    _self->m_start_time = get_tick_count();
 8002d14:	f7ff fd55 	bl	80027c2 <get_tick_count>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	605a      	str	r2, [r3, #4]
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <elapsed_timer_get_remain>:
static inline int32_t elapsed_timer_get_remain(elapsed_timer_t* _self){
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
    int32_t remain_time = get_tick_count() - _self->m_start_time;
 8002d30:	f7ff fd47 	bl	80027c2 <get_tick_count>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	60fb      	str	r3, [r7, #12]
    if(remain_time >= _self->m_duration || _self->m_start_time > get_tick_count()){
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	da0b      	bge.n	8002d62 <elapsed_timer_get_remain+0x3a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	17da      	asrs	r2, r3, #31
 8002d50:	461c      	mov	r4, r3
 8002d52:	4615      	mov	r5, r2
 8002d54:	f7ff fd35 	bl	80027c2 <get_tick_count>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	42a2      	cmp	r2, r4
 8002d5e:	41ab      	sbcs	r3, r5
 8002d60:	da01      	bge.n	8002d66 <elapsed_timer_get_remain+0x3e>
        return 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e003      	b.n	8002d6e <elapsed_timer_get_remain+0x46>
        return _self->m_duration - remain_time;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bdb0      	pop	{r4, r5, r7, pc}

08002d76 <io_sv_init>:
#include "sm_elapsed_timer.h"

elapsed_timer_t g_latch_off_timer = {.m_duration = 500, .m_start_time = 0};
uint8_t g_is_wait_latch_off = 0;

int32_t io_sv_init(){
 8002d76:	b580      	push	{r7, lr}
 8002d78:	af00      	add	r7, sp, #0
	io_sv_set_val(IO_CTRL_EN_100A_FET, 1);
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	f000 f807 	bl	8002d90 <io_sv_set_val>
	io_sv_set_val(IO_CTRL_EN_200A_FET, 1);
 8002d82:	2101      	movs	r1, #1
 8002d84:	2003      	movs	r0, #3
 8002d86:	f000 f803 	bl	8002d90 <io_sv_set_val>

	return 0;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <io_sv_set_val>:

int32_t io_sv_set_val(IO_SV_PIN _pin, uint8_t _val){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	460a      	mov	r2, r1
 8002d9a:	71fb      	strb	r3, [r7, #7]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	71bb      	strb	r3, [r7, #6]
	switch (_pin) {
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2b0e      	cmp	r3, #14
 8002da4:	f200 8095 	bhi.w	8002ed2 <io_sv_set_val+0x142>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <io_sv_set_val+0x20>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002ded 	.word	0x08002ded
 8002db4:	08002dfd 	.word	0x08002dfd
 8002db8:	08002e0d 	.word	0x08002e0d
 8002dbc:	08002e1d 	.word	0x08002e1d
 8002dc0:	08002e2d 	.word	0x08002e2d
 8002dc4:	08002e3d 	.word	0x08002e3d
 8002dc8:	08002e4d 	.word	0x08002e4d
 8002dcc:	08002e5d 	.word	0x08002e5d
 8002dd0:	08002e6d 	.word	0x08002e6d
 8002dd4:	08002e7d 	.word	0x08002e7d
 8002dd8:	08002e9b 	.word	0x08002e9b
 8002ddc:	08002ea9 	.word	0x08002ea9
 8002de0:	08002eb7 	.word	0x08002eb7
 8002de4:	08002ec5 	.word	0x08002ec5
 8002de8:	08002e8d 	.word	0x08002e8d
		case IO_CTRL_EN_FAST_CHG_FET:
			HAL_GPIO_WritePin(CTRL_FAST_CHG_FET_GPIO_Port, CTRL_FAST_CHG_FET_Pin, _val);
 8002dec:	79bb      	ldrb	r3, [r7, #6]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002df4:	483b      	ldr	r0, [pc, #236]	; (8002ee4 <io_sv_set_val+0x154>)
 8002df6:	f7fe fd71 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002dfa:	e06d      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_EN_100A_CHG_FET:
			HAL_GPIO_WritePin(CTRL_100A_CHG_FET_GPIO_Port, CTRL_100A_CHG_FET_Pin, _val);
 8002dfc:	79bb      	ldrb	r3, [r7, #6]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e04:	4837      	ldr	r0, [pc, #220]	; (8002ee4 <io_sv_set_val+0x154>)
 8002e06:	f7fe fd69 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e0a:	e065      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_EN_100A_FET:
			HAL_GPIO_WritePin(CTRL_100A_FET_GPIO_Port, CTRL_100A_FET_Pin, _val);
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e14:	4833      	ldr	r0, [pc, #204]	; (8002ee4 <io_sv_set_val+0x154>)
 8002e16:	f7fe fd61 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e1a:	e05d      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_EN_200A_FET:
			HAL_GPIO_WritePin(CTRL_200A_FET_GPIO_Port, CTRL_200A_FET_Pin, _val);
 8002e1c:	79bb      	ldrb	r3, [r7, #6]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e24:	482f      	ldr	r0, [pc, #188]	; (8002ee4 <io_sv_set_val+0x154>)
 8002e26:	f7fe fd59 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e2a:	e055      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_WARN_LED:
			HAL_GPIO_WritePin(CTRL_WARN_LED_GPIO_Port, CTRL_WARN_LED_Pin, _val);
 8002e2c:	79bb      	ldrb	r3, [r7, #6]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e34:	482c      	ldr	r0, [pc, #176]	; (8002ee8 <io_sv_set_val+0x158>)
 8002e36:	f7fe fd51 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e3a:	e04d      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LED_100:
			HAL_GPIO_WritePin(CTRL_LED_100_GPIO_Port, CTRL_LED_100_Pin, _val);
 8002e3c:	79bb      	ldrb	r3, [r7, #6]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e44:	4828      	ldr	r0, [pc, #160]	; (8002ee8 <io_sv_set_val+0x158>)
 8002e46:	f7fe fd49 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e4a:	e045      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LED_50:
			HAL_GPIO_WritePin(CTRL_LED_50_GPIO_Port, CTRL_LED_50_Pin, _val);
 8002e4c:	79bb      	ldrb	r3, [r7, #6]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e54:	4824      	ldr	r0, [pc, #144]	; (8002ee8 <io_sv_set_val+0x158>)
 8002e56:	f7fe fd41 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e5a:	e03d      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LED_0:
			HAL_GPIO_WritePin(CTRL_LED_0_GPIO_Port, CTRL_LED_0_Pin, _val);
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e64:	4820      	ldr	r0, [pc, #128]	; (8002ee8 <io_sv_set_val+0x158>)
 8002e66:	f7fe fd39 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e6a:	e035      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LED_CHRGING:
			HAL_GPIO_WritePin(CTRL_LED_CHRGING_GPIO_Port, CTRL_LED_CHRGING_Pin, _val);
 8002e6c:	79bb      	ldrb	r3, [r7, #6]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e74:	481c      	ldr	r0, [pc, #112]	; (8002ee8 <io_sv_set_val+0x158>)
 8002e76:	f7fe fd31 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e7a:	e02d      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LED_CHECK_CHG:
			HAL_GPIO_WritePin(CTRL_LED_CHECK_CHRG_GPIO_Port, CTRL_LED_CHECK_CHRG_Pin, _val);
 8002e7c:	79bb      	ldrb	r3, [r7, #6]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e84:	4818      	ldr	r0, [pc, #96]	; (8002ee8 <io_sv_set_val+0x158>)
 8002e86:	f7fe fd29 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e8a:	e025      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_RELAY_EXT:
			HAL_GPIO_WritePin(CTRL_RELAY_EXT_GPIO_Port, CTRL_RELAY_EXT_Pin, _val);
 8002e8c:	79bb      	ldrb	r3, [r7, #6]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2140      	movs	r1, #64	; 0x40
 8002e92:	4815      	ldr	r0, [pc, #84]	; (8002ee8 <io_sv_set_val+0x158>)
 8002e94:	f7fe fd22 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002e98:	e01e      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LATCH_ANI1:
			HAL_GPIO_WritePin(LATCH_AIN1_GPIO_Port, LATCH_AIN1_Pin, _val);
 8002e9a:	79bb      	ldrb	r3, [r7, #6]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	4811      	ldr	r0, [pc, #68]	; (8002ee8 <io_sv_set_val+0x158>)
 8002ea2:	f7fe fd1b 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002ea6:	e017      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LATCH_ANI2:
			HAL_GPIO_WritePin(LATCH_AIN2_GPIO_Port, LATCH_AIN2_Pin, _val);
 8002ea8:	79bb      	ldrb	r3, [r7, #6]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2110      	movs	r1, #16
 8002eae:	480e      	ldr	r0, [pc, #56]	; (8002ee8 <io_sv_set_val+0x158>)
 8002eb0:	f7fe fd14 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002eb4:	e010      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LATCH_STBY:
			HAL_GPIO_WritePin(LATCH_STBY_GPIO_Port, LATCH_STBY_Pin, _val);
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2120      	movs	r1, #32
 8002ebc:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <io_sv_set_val+0x158>)
 8002ebe:	f7fe fd0d 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002ec2:	e009      	b.n	8002ed8 <io_sv_set_val+0x148>
		case IO_CTRL_LATCH_PWMA:
			HAL_GPIO_WritePin(LATCH_PWMA_GPIO_Port, LATCH_PWMA_Pin, _val);
 8002ec4:	79bb      	ldrb	r3, [r7, #6]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2108      	movs	r1, #8
 8002eca:	4807      	ldr	r0, [pc, #28]	; (8002ee8 <io_sv_set_val+0x158>)
 8002ecc:	f7fe fd06 	bl	80018dc <HAL_GPIO_WritePin>
			break;
 8002ed0:	e002      	b.n	8002ed8 <io_sv_set_val+0x148>
		default:
			return -1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ed6:	e000      	b.n	8002eda <io_sv_set_val+0x14a>
			break;
	}
	return 0;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40010800 	.word	0x40010800
 8002ee8:	40010c00 	.word	0x40010c00

08002eec <io_sv_ctrl_normal_charger>:
			break;
	}
	return -1;
}

int32_t io_sv_ctrl_normal_charger(uint8_t _val){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
	io_sv_set_val(IO_CTRL_EN_100A_CHG_FET, _val);
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7ff ff48 	bl	8002d90 <io_sv_set_val>
	io_sv_set_val(IO_CTRL_LED_CHRGING, _val);
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	4619      	mov	r1, r3
 8002f04:	2008      	movs	r0, #8
 8002f06:	f7ff ff43 	bl	8002d90 <io_sv_set_val>

	return 0;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <io_sv_ctrl_fast_charger>:

int32_t io_sv_ctrl_fast_charger(uint8_t _val){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
	io_sv_set_val(IO_CTRL_EN_FAST_CHG_FET, _val);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4619      	mov	r1, r3
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7ff ff34 	bl	8002d90 <io_sv_set_val>
	io_sv_set_val(IO_CTRL_LED_CHECK_CHG, _val);
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	2009      	movs	r0, #9
 8002f2e:	f7ff ff2f 	bl	8002d90 <io_sv_set_val>

	return 0;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <io_sv_set_led_status>:

int32_t io_sv_set_led_status(uint8_t _val){
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
	switch (_val) {
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d020      	beq.n	8002f8e <io_sv_set_led_status+0x52>
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	dc2b      	bgt.n	8002fa8 <io_sv_set_led_status+0x6c>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <io_sv_set_led_status+0x1e>
 8002f54:	2b32      	cmp	r3, #50	; 0x32
 8002f56:	d00d      	beq.n	8002f74 <io_sv_set_led_status+0x38>
			io_sv_set_val(IO_CTRL_LED_100, 1);
			io_sv_set_val(IO_CTRL_LED_50, 1);
			io_sv_set_val(IO_CTRL_LED_0, 1);
			break;
		default:
			break;
 8002f58:	e026      	b.n	8002fa8 <io_sv_set_led_status+0x6c>
			io_sv_set_val(IO_CTRL_LED_100, 0);
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2005      	movs	r0, #5
 8002f5e:	f7ff ff17 	bl	8002d90 <io_sv_set_val>
			io_sv_set_val(IO_CTRL_LED_50, 0);
 8002f62:	2100      	movs	r1, #0
 8002f64:	2006      	movs	r0, #6
 8002f66:	f7ff ff13 	bl	8002d90 <io_sv_set_val>
			io_sv_set_val(IO_CTRL_LED_0, 1);
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	2007      	movs	r0, #7
 8002f6e:	f7ff ff0f 	bl	8002d90 <io_sv_set_val>
			break;
 8002f72:	e01a      	b.n	8002faa <io_sv_set_led_status+0x6e>
			io_sv_set_val(IO_CTRL_LED_100, 0);
 8002f74:	2100      	movs	r1, #0
 8002f76:	2005      	movs	r0, #5
 8002f78:	f7ff ff0a 	bl	8002d90 <io_sv_set_val>
			io_sv_set_val(IO_CTRL_LED_50, 1);
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2006      	movs	r0, #6
 8002f80:	f7ff ff06 	bl	8002d90 <io_sv_set_val>
			io_sv_set_val(IO_CTRL_LED_0, 1);
 8002f84:	2101      	movs	r1, #1
 8002f86:	2007      	movs	r0, #7
 8002f88:	f7ff ff02 	bl	8002d90 <io_sv_set_val>
			break;
 8002f8c:	e00d      	b.n	8002faa <io_sv_set_led_status+0x6e>
			io_sv_set_val(IO_CTRL_LED_100, 1);
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2005      	movs	r0, #5
 8002f92:	f7ff fefd 	bl	8002d90 <io_sv_set_val>
			io_sv_set_val(IO_CTRL_LED_50, 1);
 8002f96:	2101      	movs	r1, #1
 8002f98:	2006      	movs	r0, #6
 8002f9a:	f7ff fef9 	bl	8002d90 <io_sv_set_val>
			io_sv_set_val(IO_CTRL_LED_0, 1);
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	2007      	movs	r0, #7
 8002fa2:	f7ff fef5 	bl	8002d90 <io_sv_set_val>
			break;
 8002fa6:	e000      	b.n	8002faa <io_sv_set_led_status+0x6e>
			break;
 8002fa8:	bf00      	nop
	}

	return 0;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <io_sv_open_latch>:

int32_t io_sv_open_latch(){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	io_sv_set_val(IO_CTRL_LATCH_ANI1, 0);
 8002fb8:	2100      	movs	r1, #0
 8002fba:	200a      	movs	r0, #10
 8002fbc:	f7ff fee8 	bl	8002d90 <io_sv_set_val>
	io_sv_set_val(IO_CTRL_LATCH_ANI2, 1);
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	200b      	movs	r0, #11
 8002fc4:	f7ff fee4 	bl	8002d90 <io_sv_set_val>
	io_sv_set_val(IO_CTRL_LATCH_PWMA, 1);
 8002fc8:	2101      	movs	r1, #1
 8002fca:	200d      	movs	r0, #13
 8002fcc:	f7ff fee0 	bl	8002d90 <io_sv_set_val>

	io_sv_set_val(IO_CTRL_LATCH_STBY, 1);
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	200c      	movs	r0, #12
 8002fd4:	f7ff fedc 	bl	8002d90 <io_sv_set_val>

	elapsed_timer_reset(&g_latch_off_timer);
 8002fd8:	4804      	ldr	r0, [pc, #16]	; (8002fec <io_sv_open_latch+0x38>)
 8002fda:	f7ff fe97 	bl	8002d0c <elapsed_timer_reset>
	g_is_wait_latch_off = 1;
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <io_sv_open_latch+0x3c>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
	return 0;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000000c 	.word	0x2000000c
 8002ff0:	20000124 	.word	0x20000124

08002ff4 <io_sv_close_latch>:

int32_t io_sv_close_latch(){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
	io_sv_set_val(IO_CTRL_LATCH_ANI1, 1);
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	200a      	movs	r0, #10
 8002ffc:	f7ff fec8 	bl	8002d90 <io_sv_set_val>
	io_sv_set_val(IO_CTRL_LATCH_ANI2, 0);
 8003000:	2100      	movs	r1, #0
 8003002:	200b      	movs	r0, #11
 8003004:	f7ff fec4 	bl	8002d90 <io_sv_set_val>
	io_sv_set_val(IO_CTRL_LATCH_PWMA, 1);
 8003008:	2101      	movs	r1, #1
 800300a:	200d      	movs	r0, #13
 800300c:	f7ff fec0 	bl	8002d90 <io_sv_set_val>

	io_sv_set_val(IO_CTRL_LATCH_STBY, 1);
 8003010:	2101      	movs	r1, #1
 8003012:	200c      	movs	r0, #12
 8003014:	f7ff febc 	bl	8002d90 <io_sv_set_val>

	g_is_wait_latch_off = 1;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <io_sv_close_latch+0x30>)
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
	return 0;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000124 	.word	0x20000124

08003028 <io_sv_process>:

int32_t io_sv_process(){
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	if(g_is_wait_latch_off && !elapsed_timer_get_remain(&g_latch_off_timer)){
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <io_sv_process+0x44>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d018      	beq.n	8003066 <io_sv_process+0x3e>
 8003034:	480e      	ldr	r0, [pc, #56]	; (8003070 <io_sv_process+0x48>)
 8003036:	f7ff fe77 	bl	8002d28 <elapsed_timer_get_remain>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d112      	bne.n	8003066 <io_sv_process+0x3e>
		io_sv_set_val(IO_CTRL_LATCH_STBY, 0);
 8003040:	2100      	movs	r1, #0
 8003042:	200c      	movs	r0, #12
 8003044:	f7ff fea4 	bl	8002d90 <io_sv_set_val>

		io_sv_set_val(IO_CTRL_LATCH_ANI1, 0);
 8003048:	2100      	movs	r1, #0
 800304a:	200a      	movs	r0, #10
 800304c:	f7ff fea0 	bl	8002d90 <io_sv_set_val>
		io_sv_set_val(IO_CTRL_LATCH_ANI2, 0);
 8003050:	2100      	movs	r1, #0
 8003052:	200b      	movs	r0, #11
 8003054:	f7ff fe9c 	bl	8002d90 <io_sv_set_val>
		io_sv_set_val(IO_CTRL_LATCH_PWMA, 0);
 8003058:	2100      	movs	r1, #0
 800305a:	200d      	movs	r0, #13
 800305c:	f7ff fe98 	bl	8002d90 <io_sv_set_val>
		g_is_wait_latch_off = 0;
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <io_sv_process+0x44>)
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000124 	.word	0x20000124
 8003070:	2000000c 	.word	0x2000000c

08003074 <memset>:
 8003074:	4603      	mov	r3, r0
 8003076:	4402      	add	r2, r0
 8003078:	4293      	cmp	r3, r2
 800307a:	d100      	bne.n	800307e <memset+0xa>
 800307c:	4770      	bx	lr
 800307e:	f803 1b01 	strb.w	r1, [r3], #1
 8003082:	e7f9      	b.n	8003078 <memset+0x4>

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	2600      	movs	r6, #0
 8003088:	4d0c      	ldr	r5, [pc, #48]	; (80030bc <__libc_init_array+0x38>)
 800308a:	4c0d      	ldr	r4, [pc, #52]	; (80030c0 <__libc_init_array+0x3c>)
 800308c:	1b64      	subs	r4, r4, r5
 800308e:	10a4      	asrs	r4, r4, #2
 8003090:	42a6      	cmp	r6, r4
 8003092:	d109      	bne.n	80030a8 <__libc_init_array+0x24>
 8003094:	f000 f81a 	bl	80030cc <_init>
 8003098:	2600      	movs	r6, #0
 800309a:	4d0a      	ldr	r5, [pc, #40]	; (80030c4 <__libc_init_array+0x40>)
 800309c:	4c0a      	ldr	r4, [pc, #40]	; (80030c8 <__libc_init_array+0x44>)
 800309e:	1b64      	subs	r4, r4, r5
 80030a0:	10a4      	asrs	r4, r4, #2
 80030a2:	42a6      	cmp	r6, r4
 80030a4:	d105      	bne.n	80030b2 <__libc_init_array+0x2e>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ac:	4798      	blx	r3
 80030ae:	3601      	adds	r6, #1
 80030b0:	e7ee      	b.n	8003090 <__libc_init_array+0xc>
 80030b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b6:	4798      	blx	r3
 80030b8:	3601      	adds	r6, #1
 80030ba:	e7f2      	b.n	80030a2 <__libc_init_array+0x1e>
 80030bc:	08003108 	.word	0x08003108
 80030c0:	08003108 	.word	0x08003108
 80030c4:	08003108 	.word	0x08003108
 80030c8:	0800310c 	.word	0x0800310c

080030cc <_init>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr

080030d8 <_fini>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr
